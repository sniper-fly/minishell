 Memcheck, a memory error detector
 Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
 Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
 Command: ./minishell

 Conditional jump or move depends on uninitialised value(s)
 at 0x10A42B: ft_strlen (ft_strlen.c:20)
 by 0x10AB8A: ft_strlcpy (ft_strlcpy.c:29)
 by 0x10A980: ft_split (ft_split.c:100)
 by 0x108EA5: get_path_array (get_path_array.c:16)
 by 0x109945: my_execve (my_execve.c:69)
 by 0x10A2E1: exec_test (test_execute.c:74)
 by 0x10A3AC: main (test_execute.c:100)





















 /bin/: Is a directory

 HEAP SUMMARY:
 in use at exit: 9,796 bytes in 154 blocks
 total heap usage: 192 allocs, 38 frees, 10,272 bytes allocated

 LEAK SUMMARY:
 definitely lost: 0 bytes in 0 blocks
 indirectly lost: 0 bytes in 0 blocks
 possibly lost: 0 bytes in 0 blocks
 still reachable: 9,796 bytes in 154 blocks
 suppressed: 0 bytes in 0 blocks
 Rerun with --leak-check=full to see details of leaked memory

 For counts of detected and suppressed errors, rerun with: -v
 ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
 /root/a: Permission denied

 HEAP SUMMARY:
 in use at exit: 9,796 bytes in 154 blocks
 total heap usage: 192 allocs, 38 frees, 10,272 bytes allocated

 LEAK SUMMARY:
 definitely lost: 0 bytes in 0 blocks
 indirectly lost: 0 bytes in 0 blocks
 possibly lost: 0 bytes in 0 blocks
 still reachable: 9,796 bytes in 154 blocks
 suppressed: 0 bytes in 0 blocks
 Rerun with --leak-check=full to see details of leaked memory

 For counts of detected and suppressed errors, rerun with: -v
 ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
 /not/exist: No such file or directory

 HEAP SUMMARY:
 in use at exit: 9,796 bytes in 154 blocks
 total heap usage: 192 allocs, 38 frees, 10,272 bytes allocated

 LEAK SUMMARY:
 definitely lost: 0 bytes in 0 blocks
 indirectly lost: 0 bytes in 0 blocks
 possibly lost: 0 bytes in 0 blocks
 still reachable: 9,796 bytes in 154 blocks
 suppressed: 0 bytes in 0 blocks
 Rerun with --leak-check=full to see details of leaked memory

 For counts of detected and suppressed errors, rerun with: -v
 ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
 Conditional jump or move depends on uninitialised value(s)
 at 0x10A42B: ft_strlen (ft_strlen.c:20)
 by 0x10AB8A: ft_strlcpy (ft_strlcpy.c:29)
 by 0x10A980: ft_split (ft_split.c:100)
 by 0x108EA5: get_path_array (get_path_array.c:16)
 by 0x109945: my_execve (my_execve.c:69)
 by 0x10A2E1: exec_test (test_execute.c:74)
 by 0x10A3E8: main (test_execute.c:105)

 command not found

 HEAP SUMMARY:
 in use at exit: 11,265 bytes in 187 blocks
 total heap usage: 284 allocs, 97 frees, 15,342 bytes allocated

 LEAK SUMMARY:
 definitely lost: 0 bytes in 0 blocks
 indirectly lost: 0 bytes in 0 blocks
 possibly lost: 0 bytes in 0 blocks
 still reachable: 11,265 bytes in 187 blocks
 suppressed: 0 bytes in 0 blocks
 Rerun with --leak-check=full to see details of leaked memory

 For counts of detected and suppressed errors, rerun with: -v
 Use --track-origins=yes to see where uninitialised values come from
 ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

 HEAP SUMMARY:
 in use at exit: 5,366 bytes in 115 blocks
 total heap usage: 115 allocs, 0 frees, 5,366 bytes allocated

 LEAK SUMMARY:
 definitely lost: 0 bytes in 0 blocks
 indirectly lost: 0 bytes in 0 blocks
 possibly lost: 0 bytes in 0 blocks
 still reachable: 5,366 bytes in 115 blocks
 suppressed: 0 bytes in 0 blocks
 Rerun with --leak-check=full to see details of leaked memory

 For counts of detected and suppressed errors, rerun with: -v
 ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
